{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","dummy/tests/acceptance/auto-scroll-test.js","dummy/tests/acceptance/smoke-modifier-test.js","dummy/tests/helpers/start-app.js","dummy/tests/integration/modifiers/sortable-group-test.js","dummy/tests/test-helper.js","dummy/tests/unit/services/ember-sortable-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"dummy/tests/acceptance/auto-scroll-test\", [\"qunit\", \"@ember/test-helpers\", \"ember-qunit\", \"ember-sortable/test-support/helpers\"], function (_qunit, _testHelpers, _emberQunit, _helpers) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"@ember/test-helpers\",0,\"ember-qunit\",0,\"ember-sortable/test-support/helpers\"eaimeta@70e063a35619d71f\n\n  (0, _qunit.module)('Acceptance | container auto scroll', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    hooks.beforeEach(function () {\n      document.getElementById('ember-testing-container').scrollTop = 0;\n      document.documentElement.scrollTop = 0;\n    });\n    (0, _qunit.test)('verticaly reordering can scroll his parent container', async function (assert) {\n      await (0, _testHelpers.visit)('/docautoscroll');\n\n      let itemHeight = () => {\n        let item = (0, _testHelpers.find)('[data-test-doc-auto-scroll-demo-item]');\n        const itemStyle = item.currentStyle || window.getComputedStyle(item);\n        return item.offsetHeight + parseInt(itemStyle.marginTop);\n      };\n\n      await (0, _helpers.drag)('mouse', '[data-test-doc-auto-scroll-demo-item]', () => {\n        return {\n          dy: itemHeight() * 30 + 1,\n          dx: undefined\n        };\n      });\n      assert.ok(document.getElementById('ember-testing-container').scrollTop, 'The container has scroll (top)');\n    });\n    (0, _qunit.test)('horizontaly reordering can scroll his parent container', async function (assert) {\n      await (0, _testHelpers.visit)('/docautoscroll?direction=x');\n\n      let itemWidth = () => {\n        let item = (0, _testHelpers.find)('[data-test-doc-auto-scroll-demo-item]');\n        const itemStyle = item.currentStyle || window.getComputedStyle(item);\n        return item.offsetWidth + parseInt(itemStyle.marginLeft);\n      };\n\n      await (0, _helpers.drag)('mouse', '[data-test-doc-auto-scroll-demo-item]', () => {\n        return {\n          dy: undefined,\n          dx: itemWidth() * 30 + 1\n        };\n      });\n      assert.ok(document.getElementById('ember-testing-container').scrollLeft, 'The container has scroll (left)');\n    });\n  });\n});","define(\"dummy/tests/acceptance/smoke-modifier-test\", [\"qunit\", \"@ember/test-helpers\", \"ember-qunit\", \"ember-sortable/test-support/helpers\", \"ember-sortable/test-support/utils/keyboard\", \"ember-a11y-testing/test-support/audit\"], function (_qunit, _testHelpers, _emberQunit, _helpers, _keyboard, _audit) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"@ember/test-helpers\",0,\"ember-qunit\",0,\"ember-sortable/test-support/helpers\",0,\"ember-sortable/test-support/utils/keyboard\",0,\"ember-a11y-testing/test-support/audit\"eaimeta@70e063a35619d71f\n\n  (0, _qunit.module)('Acceptance | smoke modifier', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    (0, _qunit.test)('reordering with mouse events', async function (assert) {\n      await (0, _testHelpers.visit)('/'); // when a handle is present, the element itself shall not be draggable\n\n      assert.equal(verticalContents(), 'Zero One Two Three Four');\n      assert.equal(horizontalContents(), 'Zero One Two Three Four');\n      assert.equal(tableContents(), 'Zero One Two Three Four');\n      assert.equal(scrollableContents(), 'Zero One Two Three Four');\n      let order = (0, _testHelpers.findAll)('[data-test-vertical-demo-handle]').reverse();\n      await (0, _helpers.reorder)('mouse', '[data-test-vertical-demo-handle]', ...order);\n      assert.equal(verticalContents(), 'Four Three Two One Zero');\n      assert.equal(horizontalContents(), 'Four Three Two One Zero');\n      assert.equal(tableContents(), 'Four Three Two One Zero');\n      assert.equal(scrollableContents(), 'Four Three Two One Zero');\n      order = (0, _testHelpers.findAll)('[data-test-vertical-demo-handle]');\n      await (0, _helpers.reorder)('mouse', '[data-test-vertical-demo-handle]', order[4], order[3], order[2], order[1], order[0]);\n      assert.equal(verticalContents(), 'Zero One Two Three Four');\n      assert.equal(horizontalContents(), 'Zero One Two Three Four');\n      assert.equal(tableContents(), 'Zero One Two Three Four');\n      assert.equal(scrollableContents(), 'Zero One Two Three Four');\n    });\n    (0, _qunit.test)('reordering with mouse events horizontal', async function (assert) {\n      await (0, _testHelpers.visit)('/');\n      assert.equal(verticalContents(), 'Zero One Two Three Four');\n      assert.equal(horizontalContents(), 'Zero One Two Three Four');\n      assert.equal(tableContents(), 'Zero One Two Three Four');\n      assert.equal(scrollableContents(), 'Zero One Two Three Four');\n      let order = (0, _testHelpers.findAll)('[data-test-horizontal-demo-handle]');\n      await (0, _helpers.reorder)('mouse', '[data-test-horizontal-demo-handle]', order[1], order[0], order[2], order[3], order[4]);\n      assert.equal(verticalContents(), 'One Zero Two Three Four');\n      assert.equal(horizontalContents(), 'One Zero Two Three Four');\n      assert.equal(tableContents(), 'One Zero Two Three Four');\n      assert.equal(scrollableContents(), 'One Zero Two Three Four');\n    });\n    (0, _qunit.test)('reordering with mouse events scrollable', async function (assert) {\n      await (0, _testHelpers.visit)('/');\n\n      let itemHeight = () => {\n        let item = (0, _testHelpers.find)('[data-test-scrollable-demo-handle]');\n        const itemStyle = item.currentStyle || window.getComputedStyle(item);\n        return item.offsetHeight + parseInt(itemStyle.marginTop);\n      };\n\n      await (0, _helpers.drag)('mouse', '[data-test-scrollable-demo-handle] .handle', () => {\n        return {\n          dy: itemHeight() * 2 + 1,\n          dx: undefined\n        };\n      });\n      assert.equal(scrollableContents(), 'One Two Zero Three Four');\n      let order = (0, _testHelpers.findAll)('[data-test-scrollable-demo-handle] .handle');\n      await (0, _helpers.reorder)('mouse', '[data-test-scrollable-demo-handle] .handle', order[1], order[0], order[2], order[3], order[4]);\n      assert.equal(scrollableContents(), 'Two One Zero Three Four');\n    });\n    (0, _qunit.test)('mouse event onChange has correct dragged item', async function (assert) {\n      await (0, _testHelpers.visit)('/');\n      let order = (0, _testHelpers.findAll)('[data-test-vertical-demo-handle]');\n      await (0, _helpers.reorder)('mouse', '[data-test-vertical-demo-handle]', order[1]);\n      assert.equal(justDraggedContents(), 'One');\n    });\n    (0, _qunit.test)('Test isAnimated still works without css for transitionDuration', async function (assert) {\n      await (0, _testHelpers.visit)('/');\n      assert.equal(verticalContents(), 'Zero One Two Three Four');\n      assert.equal(horizontalContents(), 'Zero One Two Three Four');\n      assert.equal(tableContents(), 'Zero One Two Three Four');\n      assert.equal(scrollableContents(), 'Zero One Two Three Four');\n      let order = (0, _testHelpers.findAll)('[data-test-vertical-demo-handle-no-css]').reverse();\n      await (0, _helpers.reorder)('mouse', '[data-test-vertical-demo-handle-no-css]', ...order);\n      assert.equal(verticalContents(), 'Four Three Two One Zero');\n      assert.equal(horizontalContents(), 'Four Three Two One Zero');\n      assert.equal(tableContents(), 'Four Three Two One Zero');\n      assert.equal(scrollableContents(), 'Four Three Two One Zero');\n    });\n    (0, _qunit.test)('reordering with touch events', async function (assert) {\n      await (0, _testHelpers.visit)('/');\n      assert.equal(verticalContents(), 'Zero One Two Three Four');\n      assert.equal(horizontalContents(), 'Zero One Two Three Four');\n      assert.equal(tableContents(), 'Zero One Two Three Four');\n      assert.equal(scrollableContents(), 'Zero One Two Three Four');\n      let order = (0, _testHelpers.findAll)('[data-test-vertical-demo-handle]').reverse();\n      await (0, _helpers.reorder)('touch', '[data-test-vertical-demo-handle]', ...order);\n      assert.equal(verticalContents(), 'Four Three Two One Zero');\n      assert.equal(horizontalContents(), 'Four Three Two One Zero');\n      assert.equal(tableContents(), 'Four Three Two One Zero');\n      assert.equal(scrollableContents(), 'Four Three Two One Zero');\n      order = (0, _testHelpers.findAll)('[data-test-vertical-demo-handle]');\n      await (0, _helpers.reorder)('touch', '[data-test-vertical-demo-handle]', order[4], order[3], order[2], order[1], order[0]);\n      assert.equal(verticalContents(), 'Zero One Two Three Four');\n      assert.equal(horizontalContents(), 'Zero One Two Three Four');\n      assert.equal(tableContents(), 'Zero One Two Three Four');\n      assert.equal(scrollableContents(), 'Zero One Two Three Four');\n    });\n    (0, _qunit.test)('reordering with touch events scrollable', async function (assert) {\n      await (0, _testHelpers.visit)('/');\n      assert.equal(verticalContents(), 'Zero One Two Three Four');\n      assert.equal(horizontalContents(), 'Zero One Two Three Four');\n      assert.equal(tableContents(), 'Zero One Two Three Four');\n      assert.equal(scrollableContents(), 'Zero One Two Three Four');\n      let order = (0, _testHelpers.findAll)('[data-test-scrollable-demo-handle] .handle').reverse();\n      await (0, _helpers.reorder)('touch', '[data-test-scrollable-demo-handle] .handle', ...order);\n      assert.equal(verticalContents(), 'Four Three Two One Zero');\n      assert.equal(horizontalContents(), 'Four Three Two One Zero');\n      assert.equal(tableContents(), 'Four Three Two One Zero');\n      assert.equal(scrollableContents(), 'Four Three Two One Zero');\n      order = (0, _testHelpers.findAll)('[data-test-scrollable-demo-handle] .handle');\n      await (0, _helpers.reorder)('touch', '[data-test-scrollable-demo-handle] .handle', order[4], order[3], order[2], order[1], order[0]);\n      assert.equal(verticalContents(), 'Zero One Two Three Four');\n      assert.equal(horizontalContents(), 'Zero One Two Three Four');\n      assert.equal(tableContents(), 'Zero One Two Three Four');\n      assert.equal(scrollableContents(), 'Zero One Two Three Four');\n    });\n    (0, _qunit.test)('Touch event onChange has correct dragged item', async function (assert) {\n      await (0, _testHelpers.visit)('/');\n      let order = (0, _testHelpers.findAll)('[data-test-vertical-demo-handle]');\n      await (0, _helpers.reorder)('touch', '[data-test-vertical-demo-handle]', order[1]);\n      assert.equal(justDraggedContents(), 'One');\n    });\n    (0, _qunit.module)('[A11y] Reordering with keyboard events', function () {\n      (0, _qunit.test)('A11yAudit', async function (assert) {\n        assert.expect(1);\n        await (0, _testHelpers.visit)('/');\n        await (0, _audit.default)();\n        assert.ok(true, 'no a11y errors found!');\n      });\n      (0, _qunit.test)('Keyboard selection shows UP and DOWN visual indicators on vertical sort', async function (assert) {\n        assert.expect(8);\n        await (0, _testHelpers.visit)('/');\n        const handle = (0, _testHelpers.find)('[data-test-vertical-demo-handle]');\n        await (0, _testHelpers.focus)(handle);\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-vertical-demo-handle]', 'keydown', _keyboard.SPACE_KEY_CODE);\n        assert.dom('[data-test-vertical-demo-item]').hasClass('sortable-item--active');\n        assert.dom(handle).doesNotHaveClass('sortable-handle-up');\n        assert.dom(handle).hasClass('sortable-handle-down');\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-vertical-demo-group]', 'keydown', _keyboard.ARROW_KEY_CODES.DOWN);\n        assert.dom(handle).hasClass('sortable-handle-up');\n        assert.dom(handle).hasClass('sortable-handle-down');\n        await (0, _testHelpers.blur)('[data-test-vertical-demo-group]');\n        assert.dom('[data-test-vertical-demo-item]').doesNotHaveClass('sortable-item--active');\n        assert.dom(handle).doesNotHaveClass('sortable-handle-up');\n        assert.dom(handle).doesNotHaveClass('sortable-handle-down');\n      });\n      (0, _qunit.test)('Keyboard selection shows LEFT and RIGHT visual indicators on horizontal sort', async function (assert) {\n        assert.expect(8);\n        await (0, _testHelpers.visit)('/');\n        const handle = (0, _testHelpers.find)('[data-test-horizontal-demo-handle]');\n        await (0, _testHelpers.focus)(handle);\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-horizontal-demo-handle]', 'keydown', _keyboard.SPACE_KEY_CODE);\n        assert.dom(handle).hasClass('sortable-item--active');\n        assert.dom(handle).doesNotHaveClass('sortable-handle-left');\n        assert.dom(handle).hasClass('sortable-handle-right');\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-horizontal-demo-group]', 'keydown', _keyboard.ARROW_KEY_CODES.RIGHT);\n        assert.dom(handle).hasClass('sortable-handle-left');\n        assert.dom(handle).hasClass('sortable-handle-right');\n        await (0, _testHelpers.blur)('[data-test-horizontal-demo-group]');\n        assert.dom(handle).doesNotHaveClass('sortable-item--active');\n        assert.dom(handle).doesNotHaveClass('sortable-handle-left');\n        assert.dom(handle).doesNotHaveClass('sortable-handle-right');\n      });\n      (0, _qunit.test)('Keyboard selection is activated on ENTER', async function (assert) {\n        assert.expect(3);\n        await (0, _testHelpers.visit)('/');\n        await (0, _testHelpers.focus)('[data-test-vertical-demo-handle]');\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-vertical-demo-handle]', 'keydown', _keyboard.ENTER_KEY_CODE);\n        assert.dom('[data-test-vertical-demo-group]').hasAttribute('role', 'application');\n        assert.dom('[data-test-vertical-demo-group]').hasAttribute('tabindex', '-1');\n        assert.dom('[data-test-vertical-demo-group]').isFocused();\n      });\n      (0, _qunit.test)('Keyboard selection is activated on SPACE', async function (assert) {\n        assert.expect(3);\n        await (0, _testHelpers.visit)('/');\n        await (0, _testHelpers.focus)('[data-test-vertical-demo-handle]');\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-vertical-demo-handle]', 'keydown', _keyboard.SPACE_KEY_CODE);\n        assert.dom('[data-test-vertical-demo-group]').hasAttribute('role', 'application');\n        assert.dom('[data-test-vertical-demo-group]').hasAttribute('tabindex', '-1');\n        assert.dom('[data-test-vertical-demo-group]').isFocused();\n      });\n      (0, _qunit.test)('Keyboard selection is cancelled on ESC', async function (assert) {\n        assert.expect(3);\n        await (0, _testHelpers.visit)('/');\n        await (0, _testHelpers.focus)('[data-test-vertical-demo-handle]');\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-vertical-demo-handle]', 'keydown', _keyboard.ENTER_KEY_CODE);\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-vertical-demo-group]', 'keydown', _keyboard.ESCAPE_KEY_CODE);\n        assert.dom('[data-test-vertical-demo-group]').hasNoAttribute('role');\n        assert.dom('[data-test-vertical-demo-group]').hasNoAttribute('tabindex');\n        assert.dom('[data-test-vertical-demo-group]').isNotFocused();\n      });\n      (0, _qunit.test)('Keyboard selection is cancelled on losing focus', async function (assert) {\n        assert.expect(3);\n        await (0, _testHelpers.visit)('/');\n        await (0, _testHelpers.focus)('[data-test-vertical-demo-handle]');\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-vertical-demo-handle]', 'keydown', _keyboard.ENTER_KEY_CODE);\n        await (0, _testHelpers.blur)('[data-test-vertical-demo-group]');\n        assert.dom('[data-test-vertical-demo-group]').hasNoAttribute('role');\n        assert.dom('[data-test-vertical-demo-group]').hasNoAttribute('tabindex');\n        assert.dom('[data-test-vertical-demo-group]').isNotFocused();\n      });\n      (0, _qunit.test)('Keyboard selection moves down on DOWN and is cancelled on ESC', async function (assert) {\n        assert.expect(5);\n        await (0, _testHelpers.visit)('/');\n        await (0, _testHelpers.focus)('[data-test-vertical-demo-handle]');\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-vertical-demo-handle]', 'keydown', _keyboard.SPACE_KEY_CODE);\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-vertical-demo-group]', 'keydown', _keyboard.ARROW_KEY_CODES.DOWN);\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-vertical-demo-group]', 'keydown', _keyboard.ESCAPE_KEY_CODE);\n        const movedHandle = (0, _testHelpers.findAll)('[data-test-vertical-demo-handle]')[0];\n        assert.dom(movedHandle).isFocused();\n        assert.equal(verticalContents(), 'Zero One Two Three Four');\n        assert.equal(horizontalContents(), 'Zero One Two Three Four');\n        assert.equal(tableContents(), 'Zero One Two Three Four');\n        assert.equal(scrollableContents(), 'Zero One Two Three Four');\n      });\n      (0, _qunit.test)('Keyboard selection moves down on DOWN and is cancelled on losing focus', async function (assert) {\n        assert.expect(5);\n        await (0, _testHelpers.visit)('/');\n        await (0, _testHelpers.focus)('[data-test-vertical-demo-handle]');\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-vertical-demo-handle]', 'keydown', _keyboard.SPACE_KEY_CODE);\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-vertical-demo-group]', 'keydown', _keyboard.ARROW_KEY_CODES.DOWN);\n        await (0, _testHelpers.blur)('[data-test-vertical-demo-group]');\n        const movedHandle = (0, _testHelpers.findAll)('[data-test-vertical-demo-handle]')[0];\n        assert.dom(movedHandle).isNotFocused();\n        assert.equal(verticalContents(), 'Zero One Two Three Four');\n        assert.equal(horizontalContents(), 'Zero One Two Three Four');\n        assert.equal(tableContents(), 'Zero One Two Three Four');\n        assert.equal(scrollableContents(), 'Zero One Two Three Four');\n      });\n      (0, _qunit.test)('Keyboard selection is confirmed on ENTER', async function (assert) {\n        assert.expect(5);\n        await (0, _testHelpers.visit)('/');\n        await (0, _testHelpers.focus)('[data-test-vertical-demo-handle]');\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-vertical-demo-handle]', 'keydown', _keyboard.ENTER_KEY_CODE);\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-vertical-demo-group]', 'keydown', _keyboard.ARROW_KEY_CODES.DOWN);\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-vertical-demo-group]', 'keydown', _keyboard.ENTER_KEY_CODE);\n        const movedHandle = (0, _testHelpers.findAll)('[data-test-vertical-demo-handle]')[1];\n        assert.dom(movedHandle).isFocused();\n        assert.equal(verticalContents(), 'One Zero Two Three Four');\n        assert.equal(horizontalContents(), 'One Zero Two Three Four');\n        assert.equal(tableContents(), 'One Zero Two Three Four');\n        assert.equal(scrollableContents(), 'One Zero Two Three Four');\n      });\n      (0, _qunit.test)('Keyboard selection moves up on UP and is confirmed on SPACE', async function (assert) {\n        assert.expect(5);\n        await (0, _testHelpers.visit)('/');\n        await (0, _testHelpers.focus)('[data-test-vertical-demo-handle]');\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-vertical-demo-handle]', 'keydown', _keyboard.SPACE_KEY_CODE);\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-vertical-demo-group]', 'keydown', _keyboard.ARROW_KEY_CODES.DOWN);\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-vertical-demo-group]', 'keydown', _keyboard.ARROW_KEY_CODES.DOWN);\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-vertical-demo-group]', 'keydown', _keyboard.ARROW_KEY_CODES.UP);\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-vertical-demo-group]', 'keydown', _keyboard.SPACE_KEY_CODE);\n        const movedHandle = (0, _testHelpers.findAll)('[data-test-vertical-demo-handle]')[1];\n        assert.dom(movedHandle).isFocused();\n        assert.equal(verticalContents(), 'One Zero Two Three Four');\n        assert.equal(horizontalContents(), 'One Zero Two Three Four');\n        assert.equal(tableContents(), 'One Zero Two Three Four');\n        assert.equal(scrollableContents(), 'One Zero Two Three Four');\n      });\n      (0, _qunit.test)('Keyboard selection moves down on DOWN and is confirmed on SPACE', async function (assert) {\n        assert.expect(5);\n        await (0, _testHelpers.visit)('/');\n        await (0, _testHelpers.focus)('[data-test-vertical-demo-handle]');\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-vertical-demo-handle]', 'keydown', _keyboard.SPACE_KEY_CODE);\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-vertical-demo-group]', 'keydown', _keyboard.ARROW_KEY_CODES.DOWN);\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-vertical-demo-group]', 'keydown', _keyboard.SPACE_KEY_CODE);\n        const movedHandle = (0, _testHelpers.findAll)('[data-test-vertical-demo-handle]')[1];\n        assert.dom(movedHandle).isFocused();\n        assert.equal(verticalContents(), 'One Zero Two Three Four');\n        assert.equal(horizontalContents(), 'One Zero Two Three Four');\n        assert.equal(tableContents(), 'One Zero Two Three Four');\n        assert.equal(scrollableContents(), 'One Zero Two Three Four');\n      });\n      (0, _qunit.test)('Keyboard selection moves right on RIGHT and is confirmed on ENTER', async function (assert) {\n        assert.expect(5);\n        await (0, _testHelpers.visit)('/');\n        await (0, _testHelpers.focus)('[data-test-horizontal-demo-handle]');\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-horizontal-demo-handle]', 'keydown', _keyboard.ENTER_KEY_CODE);\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-horizontal-demo-group]', 'keydown', _keyboard.ARROW_KEY_CODES.RIGHT);\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-horizontal-demo-group]', 'keydown', _keyboard.ENTER_KEY_CODE);\n        const movedHandle = (0, _testHelpers.findAll)('[data-test-horizontal-demo-handle]')[1];\n        assert.dom(movedHandle).isFocused();\n        assert.equal(verticalContents(), 'One Zero Two Three Four');\n        assert.equal(horizontalContents(), 'One Zero Two Three Four');\n        assert.equal(tableContents(), 'One Zero Two Three Four');\n        assert.equal(scrollableContents(), 'One Zero Two Three Four');\n      });\n      (0, _qunit.test)('Keyboard selection moves left on LEFT and is confirmed on ENTER', async function (assert) {\n        assert.expect(5);\n        await (0, _testHelpers.visit)('/');\n        await (0, _testHelpers.focus)('[data-test-horizontal-demo-handle]');\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-horizontal-demo-handle]', 'keydown', _keyboard.ENTER_KEY_CODE);\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-horizontal-demo-group]', 'keydown', _keyboard.ARROW_KEY_CODES.RIGHT);\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-horizontal-demo-group]', 'keydown', _keyboard.ARROW_KEY_CODES.RIGHT);\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-horizontal-demo-group]', 'keydown', _keyboard.ARROW_KEY_CODES.LEFT);\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-horizontal-demo-group]', 'keydown', _keyboard.ENTER_KEY_CODE);\n        const movedHandle = (0, _testHelpers.findAll)('[data-test-horizontal-demo-handle]')[1];\n        assert.dom(movedHandle).isFocused();\n        assert.equal(verticalContents(), 'One Zero Two Three Four');\n        assert.equal(horizontalContents(), 'One Zero Two Three Four');\n        assert.equal(tableContents(), 'One Zero Two Three Four');\n        assert.equal(scrollableContents(), 'One Zero Two Three Four');\n      });\n      (0, _qunit.test)('Keyboard event onChange has correct dragged item', async function (assert) {\n        await (0, _testHelpers.visit)('/');\n        await (0, _testHelpers.focus)('[data-test-vertical-demo-handle]');\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-vertical-demo-handle]', 'keydown', _keyboard.ENTER_KEY_CODE);\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-vertical-demo-group]', 'keydown', _keyboard.ARROW_KEY_CODES.DOWN);\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-vertical-demo-group]', 'keydown', _keyboard.ENTER_KEY_CODE);\n        assert.equal(justDraggedContents(), 'Zero');\n        assert.equal(tableConditionalCellContents(), 'avocado banana cashew watermelon durian apple lemon ');\n        await (0, _testHelpers.focus)('[data-test-table-conditional-cell-handle]');\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-table-conditional-cell-handle]', 'keydown', _keyboard.ENTER_KEY_CODE);\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-table-conditional-cell-demo-group]', 'keydown', _keyboard.ARROW_KEY_CODES.DOWN);\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-table-conditional-cell-demo-group]', 'keydown', _keyboard.ENTER_KEY_CODE);\n        assert.equal(tableConditionalCellContents(), 'banana avocado cashew watermelon durian apple lemon ');\n      });\n      (0, _qunit.test)('Keyboard selection works multiple times for conditionally rendered sort-handle', async function (assert) {\n        await (0, _testHelpers.visit)('/');\n        assert.equal(tableConditionalCellContents(), 'avocado banana cashew watermelon durian apple lemon ');\n        await (0, _testHelpers.focus)('[data-test-table-conditional-cell-handle]');\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-table-conditional-cell-handle]', 'keydown', _keyboard.ENTER_KEY_CODE);\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-table-conditional-cell-demo-group]', 'keydown', _keyboard.ARROW_KEY_CODES.DOWN);\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-table-conditional-cell-demo-group]', 'keydown', _keyboard.ENTER_KEY_CODE);\n        assert.equal(tableConditionalCellContents(), 'banana avocado cashew watermelon durian apple lemon ');\n        const moveHandle = (0, _testHelpers.findAll)('[data-test-table-conditional-cell-handle]')[4];\n        await (0, _testHelpers.focus)(moveHandle);\n        await (0, _testHelpers.triggerKeyEvent)(moveHandle, 'keydown', _keyboard.ENTER_KEY_CODE);\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-table-conditional-cell-demo-group]', 'keydown', _keyboard.ARROW_KEY_CODES.UP);\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-table-conditional-cell-demo-group]', 'keydown', _keyboard.ARROW_KEY_CODES.UP);\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-table-conditional-cell-demo-group]', 'keydown', _keyboard.ENTER_KEY_CODE);\n        assert.equal(tableConditionalCellContents(), 'banana avocado durian cashew watermelon apple lemon ');\n        const moveHandle1 = (0, _testHelpers.findAll)('[data-test-table-conditional-cell-handle]')[0];\n        await (0, _testHelpers.focus)(moveHandle1);\n        await (0, _testHelpers.triggerKeyEvent)(moveHandle1, 'keydown', _keyboard.ENTER_KEY_CODE);\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-table-conditional-cell-demo-group]', 'keydown', _keyboard.ARROW_KEY_CODES.DOWN);\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-table-conditional-cell-demo-group]', 'keydown', _keyboard.ARROW_KEY_CODES.DOWN);\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-table-conditional-cell-demo-group]', 'keydown', _keyboard.ARROW_KEY_CODES.DOWN);\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-table-conditional-cell-demo-group]', 'keydown', _keyboard.ARROW_KEY_CODES.DOWN);\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-table-conditional-cell-demo-group]', 'keydown', _keyboard.ENTER_KEY_CODE);\n        assert.equal(tableConditionalCellContents(), 'avocado durian cashew watermelon banana apple lemon ');\n      });\n    });\n\n    function verticalContents() {\n      return contents('.vertical-demo ol');\n    }\n\n    function horizontalContents() {\n      return contents('.horizontal-demo ol');\n    }\n\n    function tableContents() {\n      return contents('.table-demo tbody');\n    }\n\n    function scrollableContents() {\n      return contents('.scrollable-demo ol');\n    }\n\n    function justDraggedContents() {\n      return contents('[data-test-just-dragged]');\n    }\n\n    function contents(selector) {\n      return (0, _testHelpers.find)(selector).textContent.replace(/⇕/g, '').replace(/\\s+/g, ' ').replace(/^\\s+/, '').replace(/\\s+$/, '');\n    }\n\n    function tableConditionalCellContents() {\n      const elements = (0, _testHelpers.findAll)('[data-test-fruits]');\n      let result = '';\n\n      for (const index in elements) {\n        const element = elements[index];\n        result += element.textContent.replace(/⇕/g, '').replace(/\\s+/g, ' ').replace(/^\\s+/, '').replace(/\\s+$/, '');\n        result += ' ';\n      }\n\n      return result;\n    }\n  });\n});","define(\"dummy/tests/helpers/start-app\", [\"exports\", \"dummy/app\", \"dummy/config/environment\", \"@ember/polyfills\", \"@ember/runloop\"], function (_exports, _app, _environment, _polyfills, _runloop) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = startApp;\n  0; //eaimeta@70e063a35619d71f0,\"dummy/app\",0,\"dummy/config/environment\",0,\"@ember/polyfills\",0,\"@ember/runloop\"eaimeta@70e063a35619d71f\n\n  function startApp(attrs) {\n    let attributes = (0, _polyfills.assign)({}, _environment.default.APP);\n    attributes.autoboot = true;\n    attributes = (0, _polyfills.assign)(attributes, attrs); // use defaults, but you can override;\n\n    return (0, _runloop.run)(() => {\n      let application = _app.default.create(attributes);\n\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define(\"dummy/tests/integration/modifiers/sortable-group-test\", [\"@ember/template-factory\", \"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"@ember/object\", \"ember-sortable/test-support/helpers\"], function (_templateFactory, _qunit, _emberQunit, _testHelpers, _object, _helpers) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"ember-qunit\",0,\"@ember/test-helpers\",0,\"@ember/object\",0,\"ember-sortable/test-support/helpers\",0,\"htmlbars-inline-precompile\"eaimeta@70e063a35619d71f\n\n  (0, _qunit.module)('Integration | Modifier | sortable-group', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('Works with items added after render', async function (assert) {\n      this.items = ['Uno', 'Dos', 'Tres'];\n\n      this.update = items => {\n        (0, _object.set)(this, 'items', items);\n      };\n\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <ol id=\"test-list\" {{sortable-group onChange=this.update}}>\n              {{#each this.items as |item|}}\n                <li {{sortable-item model=item}}>{{item}}</li>\n              {{/each}}\n            </ol>\n          \n      */\n      {\n        \"id\": \"5V4puGoA\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[11,\\\"ol\\\"],[24,1,\\\"test-list\\\"],[4,[38,0],null,[[\\\"onChange\\\"],[[30,0,[\\\"update\\\"]]]]],[12],[1,\\\"\\\\n\\\"],[42,[28,[37,2],[[28,[37,2],[[30,0,[\\\"items\\\"]]],null]],null],null,[[[1,\\\"          \\\"],[11,\\\"li\\\"],[4,[38,3],null,[[\\\"model\\\"],[[30,1]]]],[12],[1,[30,1]],[13],[1,\\\"\\\\n\\\"]],[1]],null],[1,\\\"      \\\"],[13],[1,\\\"\\\\n    \\\"]],[\\\"item\\\"],false,[\\\"sortable-group\\\",\\\"each\\\",\\\"-track-array\\\",\\\"sortable-item\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      (0, _object.set)(this, 'items', [...this.items, 'Quatro']);\n      await (0, _testHelpers.settled)();\n      let order = (0, _testHelpers.findAll)('li');\n      await (0, _helpers.reorder)('mouse', 'li', order[3], order[1], order[0], order[2]);\n      assert.equal(contents('#test-list'), 'Quatro Dos Uno Tres');\n      (0, _object.set)(this, 'items', this.items.slice(1));\n      await (0, _testHelpers.settled)();\n      await (0, _helpers.reorder)('mouse', 'li', order[2], order[1], order[0]);\n      assert.equal(contents('#test-list'), 'Tres Dos Uno');\n    });\n    (0, _qunit.test)('you can disabled a group', async function (assert) {\n      this.items = ['Uno', 'Dos', 'Tres', 'Quatro'];\n\n      this.update = function () {\n        assert.step('onChange was called while group is disabled');\n      };\n\n      this.disabled = false;\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <ol id=\"test-list\" {{sortable-group disabled=this.disabled onChange=this.update}}>\n              {{#each this.items as |item|}}\n                <li {{sortable-item model=item}}>{{item}}</li>\n              {{/each}}\n            </ol>\n          \n      */\n      {\n        \"id\": \"mImjEZEM\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[11,\\\"ol\\\"],[24,1,\\\"test-list\\\"],[4,[38,0],null,[[\\\"disabled\\\",\\\"onChange\\\"],[[30,0,[\\\"disabled\\\"]],[30,0,[\\\"update\\\"]]]]],[12],[1,\\\"\\\\n\\\"],[42,[28,[37,2],[[28,[37,2],[[30,0,[\\\"items\\\"]]],null]],null],null,[[[1,\\\"          \\\"],[11,\\\"li\\\"],[4,[38,3],null,[[\\\"model\\\"],[[30,1]]]],[12],[1,[30,1]],[13],[1,\\\"\\\\n\\\"]],[1]],null],[1,\\\"      \\\"],[13],[1,\\\"\\\\n    \\\"]],[\\\"item\\\"],false,[\\\"sortable-group\\\",\\\"each\\\",\\\"-track-array\\\",\\\"sortable-item\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      this.set('disabled', true);\n      let order = (0, _testHelpers.findAll)('li');\n      await (0, _helpers.reorder)('mouse', 'li', order[3], order[1], order[0], order[2]);\n      assert.ok(true, 'Reorder prevented');\n      assert.verifySteps([]);\n    });\n    (0, _qunit.test)('Announcer has appropriate text for user actions', async function (assert) {\n      this.items = ['Uno', 'Dos', 'Tres'];\n\n      this.update = items => {\n        (0, _object.set)(this, 'items', items);\n      };\n\n      await (0, _testHelpers.render)((0, _templateFactory.createTemplateFactory)(\n      /*\n        \n            <ol id=\"test-list\" {{sortable-group onChange=this.update}}>\n              {{#each this.items as |item|}}\n                <li {{sortable-item model=item}}>\n                  {{item}}\n                  <button data-test-handle={{item}} {{sortable-handle}}>\n                    handle\n                  </button>\n                </li>\n              {{/each}}\n            </ol>\n          \n      */\n      {\n        \"id\": \"qqlRbQTM\",\n        \"block\": \"[[[1,\\\"\\\\n      \\\"],[11,\\\"ol\\\"],[24,1,\\\"test-list\\\"],[4,[38,0],null,[[\\\"onChange\\\"],[[30,0,[\\\"update\\\"]]]]],[12],[1,\\\"\\\\n\\\"],[42,[28,[37,2],[[28,[37,2],[[30,0,[\\\"items\\\"]]],null]],null],null,[[[1,\\\"          \\\"],[11,\\\"li\\\"],[4,[38,3],null,[[\\\"model\\\"],[[30,1]]]],[12],[1,\\\"\\\\n            \\\"],[1,[30,1]],[1,\\\"\\\\n            \\\"],[11,\\\"button\\\"],[16,\\\"data-test-handle\\\",[30,1]],[4,[38,4],null,null],[12],[1,\\\"\\\\n              handle\\\\n            \\\"],[13],[1,\\\"\\\\n          \\\"],[13],[1,\\\"\\\\n\\\"]],[1]],null],[1,\\\"      \\\"],[13],[1,\\\"\\\\n    \\\"]],[\\\"item\\\"],false,[\\\"sortable-group\\\",\\\"each\\\",\\\"-track-array\\\",\\\"sortable-item\\\",\\\"sortable-handle\\\"]]\",\n        \"moduleName\": \"(unknown template module)\",\n        \"isStrictMode\": false\n      }));\n      (0, _testHelpers.triggerKeyEvent)('[data-test-handle=Uno]', 'keydown', 32)\n      /* SPACE */\n      ;\n      await announcerHasText();\n      assert.dom(announcerSelector).hasText('item at position, 1 of 3, is activated to be repositioned.Press up and down keys to change position, Space to confirm new position, Escape to cancel.');\n      (0, _testHelpers.triggerKeyEvent)('[data-test-handle=Uno]', 'keydown', 40)\n      /* DOWN */\n      ;\n      await announcerHasText();\n      assert.dom(announcerSelector).hasText('item is moved to position, 2 of 3. Press Space to confirm new position, Escape to cancel.');\n      (0, _testHelpers.triggerKeyEvent)('[data-test-handle=Uno]', 'keydown', 32)\n      /* SPACE */\n      ;\n      await announcerHasText();\n      assert.dom(announcerSelector).hasText('item is successfully repositioned.');\n      await (0, _testHelpers.triggerKeyEvent)('[data-test-handle=Uno]', 'keydown', 32)\n      /* SPACE */\n      ;\n      (0, _testHelpers.triggerKeyEvent)('[data-test-handle=Uno]', 'keydown', 27)\n      /* ESC */\n      ;\n      await announcerHasText();\n      assert.dom(announcerSelector).hasText('Cancelling item repositioning');\n    });\n\n    function contents(selector) {\n      return (0, _testHelpers.find)(selector).textContent.replace(/⇕/g, '').replace(/\\s+/g, ' ').replace(/^\\s+/, '').replace(/\\s+$/, '');\n    }\n\n    let announcerSelector = '#test-list + .visually-hidden';\n\n    let announcerHasText = async function () {\n      return await (0, _testHelpers.waitUntil)(() => {\n        return (0, _testHelpers.find)(announcerSelector).textContent.includes(' ');\n      }, {\n        timeout: 2000\n      });\n    };\n  });\n});","define(\"dummy/tests/test-helper\", [\"dummy/app\", \"dummy/config/environment\", \"qunit\", \"@ember/test-helpers\", \"qunit-dom\", \"ember-qunit\"], function (_app, _environment, QUnit, _testHelpers, _qunitDom, _emberQunit) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"dummy/app\",0,\"dummy/config/environment\",0,\"qunit\",0,\"@ember/test-helpers\",0,\"qunit-dom\",0,\"ember-qunit\"eaimeta@70e063a35619d71f\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _qunitDom.setup)(QUnit.assert);\n  (0, _emberQunit.start)();\n});","define(\"dummy/tests/unit/services/ember-sortable-test\", [\"qunit\", \"ember-qunit\", \"@ember/array\"], function (_qunit, _emberQunit, _array) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"qunit\",0,\"ember-qunit\",0,\"@ember/array\"eaimeta@70e063a35619d71f\n\n  (0, _qunit.module)('Unit | Service | ember-sortable', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    hooks.beforeEach(function () {\n      this.sortableService = this.owner.lookup('service:ember-sortable-internal-state'); // While not truly a group modifier, the service just registers whatever object is passed\n\n      this.groupModifier = {\n        stuff: ''\n      }; // While not truly an item modifier, the service just registers whatever object is passed\n\n      this.sortableItem = {\n        itemStuff: ''\n      };\n      this.groupName = 'GroupName';\n      this.unregisteredGroupName = 'UnregisteredName';\n    });\n    (0, _qunit.test)('Registers/Deregisters a group', function (assert) {\n      this.sortableService.registerGroup(this.groupName, this.groupModifier);\n      let groupDef = this.sortableService.groups[this.groupName];\n      assert.strictEqual(groupDef.groupModifier, this.groupModifier);\n      assert.ok((0, _array.isArray)(groupDef.items));\n      this.sortableService.deregisterGroup('unregisteredGroupName');\n      groupDef = this.sortableService.groups[this.groupName]; // did not effect registered name\n\n      assert.strictEqual(groupDef.groupModifier, this.groupModifier);\n      this.sortableService.deregisterGroup(this.groupName);\n      groupDef = this.sortableService.groups[this.groupName];\n      assert.strictEqual(groupDef, undefined);\n    });\n    (0, _qunit.test)('Registers/Deregisters an item', function (assert) {\n      this.sortableService.registerItem(this.groupName, this.sortableItem);\n      let groupDef = this.sortableService.fetchGroup(this.groupName);\n      assert.ok((0, _array.isArray)(groupDef.items));\n      assert.ok(groupDef.items.includes(this.sortableItem));\n      this.sortableService.deregisterItem(this.unregisteredGroupName, this.sortableItem);\n      groupDef = this.sortableService.fetchGroup(this.groupName);\n      assert.ok(groupDef.items.includes(this.sortableItem));\n      this.sortableService.deregisterItem(this.groupName, this.sortableItem);\n      assert.ok((0, _array.isArray)(groupDef.items));\n      assert.notOk(groupDef.items.includes(this.sortableItem));\n    });\n    (0, _qunit.test)('Fetch a group', function (assert) {\n      let groupDef = this.sortableService.fetchGroup(this.groupName);\n      assert.ok(groupDef, 'Creates a group if one is not previously registered');\n      assert.ok((0, _array.isArray)(groupDef.items));\n      let groupDef2 = this.sortableService.fetchGroup(this.groupName);\n      assert.strictEqual(groupDef, groupDef2, 'Fetches the correct group is one exists');\n    });\n  });\n});","define('dummy/config/environment', [], function() {\n  var prefix = 'dummy';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingsrxIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}